def Pose6D(pos_vec, eulXYZ_vec) :
	# Inputs
	# pos_vec: 3x1 position vector; pos_vec = [pos_x, pos_y, pos_z]
	# eulXYZ_vec: 3x1 Euler-XYZ vector; eulXYZ_vec = [eul_x, eul_y, eul_z]
	# Outputs
	# pose6D: 6x1 pose vector, where for the rotation part Rotation Angle is used as notation; pose6D = [pos_vec, rpy2rotvec(eulXYZ_vec)]

	# Converts from Euler XYZ to Rotation Vector Notation
	rot_vec = rpy2rotvec(eulXYZ_vec)

	# Make up the pose vector
	pose6d_vec = p[pos_vec[0], pos_vec[1], pos_vec[2], rot_vec[0], rot_vec[1], rot_vec[2]]

	return pose6d_vec
end

def initialization():
	# Set Current TCP
	set_tcp(TCP_1)

	# Set Picking Pose
	Pick_p = Pose6D(Pick_pos, Pick_xyz)

	# Compute Above Picking Pose
	AbovePick_p = pose_add(Pick_p, pick_offset)
	
	# Set Placing Pose
	Place_p = Pose6D(Place_pos, Place_xyz)
	
	# Compute Above Placing Pose
	AbovePlace_p = pose_add(Place_p, place_offset)
	
	movej(HomePose_q, a=1.2, v=0.2)
end


def main():

	popup("Select OK for the Robot to Start the Task", "Message", False, False, blocking=True)
	
	initialization()

	sleep(1.0)
	while (True):
	
		set_standard_digital_out(0, False)
	
		movel(AbovePick_p, a=1.2, v=0.25, r=0.05)
	
		movel(Pick_p, a=1.2, v=0.25)
		sleep(0.5)
		
		movel(AbovePick_p, a=1.2, v=0.25, r=0.05)
	
		movej(HomePose_q, a=1.2, v=0.2)
		
		movel(AbovePlace_p, a=1.2, v=0.25, r=0.05)
	
		movel(Place_p, a=1.2, v=0.25)
		sleep(0.5)
		
		movel(AbovePlace_p, a=1.2, v=0.25, r=0.05)
		
		movej(HomePose_q, a=1.2, v=0.2)
		sleep(0.5)
		
		popup("Cycle Done. Continue?", "Message", False, False, blocking=True)
	end
end

main()